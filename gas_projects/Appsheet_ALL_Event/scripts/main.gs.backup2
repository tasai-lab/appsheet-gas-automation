/**
 * 実行ログモジュール
 */
const ExecutionLogger = {
  SPREADSHEET_ID: '15Z_GT4-pDAnjDpd8vkX3B9FgYlQIQwdUF1QIEj7bVnE',
  SHEET_NAME: 'シート1',
  
  /**
   * ログを記録
   * @param {string} scriptName - スクリプト名
   * @param {string} status - ステータス (SUCCESS/ERROR/WARNING)
   * @param {string} processId - 処理ID
   * @param {string} message - メッセージ
   * @param {string} errorDetail - エラー詳細
   * @param {number} executionTime - 実行時間(秒)
   * @param {Object} inputData - 入力データ
   */
  log: function(scriptName, status, processId, message, errorDetail, executionTime, inputData) {
    try {
      const ss = SpreadsheetApp.openById(this.SPREADSHEET_ID);
      const sheet = ss.getSheetByName(this.SHEET_NAME);
      
      const timestamp = new Date();
      const user = Session.getActiveUser().getEmail();
      const inputDataStr = inputData ? JSON.stringify(inputData).substring(0, 1000) : '';
      
      sheet.appendRow([
        timestamp,
        scriptName,
        status,
        processId || '',
        message || '',
        errorDetail || '',
        executionTime || 0,
        user,
        inputDataStr
      ]);
    } catch (e) {
      Logger.log(`ログ記録エラー: ${e.message}`);
    }
  },
  
  /**
   * 成功ログ
   */
  success: function(scriptName, processId, message, executionTime, inputData) {
    this.log(scriptName, 'SUCCESS', processId, message, '', executionTime, inputData);
  },
  
  /**
   * エラーログ
   */
  error: function(scriptName, processId, message, error, executionTime, inputData) {
    const errorDetail = error ? `${error.message}\n${error.stack}` : '';
    this.log(scriptName, 'ERROR', processId, message, errorDetail, executionTime, inputData);
  },
  
  /**
   * 警告ログ
   */
  warning: function(scriptName, processId, message, executionTime, inputData) {
    this.log(scriptName, 'WARNING', processId, message, '', executionTime, inputData);
  }
};


/**
 * Webhook重複実行防止モジュール
 */
const DuplicationPrevention = {
  LOCK_TIMEOUT: 300000, // 5分
  CACHE_EXPIRATION: 3600, // 1時間
  
  /**
   * リクエストの重複チェック
   * @param {string} requestId - リクエストID（webhookデータのハッシュ値）
   * @return {boolean} - 処理を続行する場合はtrue
   */
  checkDuplicate: function(requestId) {
    const cache = CacheService.getScriptCache();
    const cacheKey = `processed_${requestId}`;
    
    // キャッシュチェック
    if (cache.get(cacheKey)) {
      Logger.log(`重複リクエストを検出: ${requestId}`);
      return false;
    }
    
    // ロック取得
    const lock = LockService.getScriptLock();
    try {
      lock.waitLock(this.LOCK_TIMEOUT);
      
      // 再度キャッシュチェック（ダブルチェック）
      if (cache.get(cacheKey)) {
        Logger.log(`ロック取得後、重複リクエストを検出: ${requestId}`);
        return false;
      }
      
      // 処理済みマークを設定
      cache.put(cacheKey, 'processed', this.CACHE_EXPIRATION);
      return true;
    } catch (e) {
      Logger.log(`ロック取得エラー: ${e.message}`);
      return false;
    } finally {
      lock.releaseLock();
    }
  },
  
  /**
   * リクエストIDを生成
   * @param {Object} data - Webhookデータ
   * @return {string} - リクエストID
   */
  generateRequestId: function(data) {
    const str = JSON.stringify(data);
    return Utilities.computeDigest(
      Utilities.DigestAlgorithm.SHA_256,
      str,
      Utilities.Charset.UTF_8
    ).map(b => (b & 0xFF).toString(16).padStart(2, '0')).join('');
  }
};


/**

 * AppSheetからのWebhook POSTリクエストを受け取るメイン関数

 * @param {GoogleAppsScript.Events.DoPost} e

 */

/**
 * AppSheet Webhook エントリーポイント
 * @param {GoogleAppsScript.Events.DoPost} e
 */
function doPost(e) {
  const params = JSON.parse(e.postData.contents);
  return processRequest(params);
}


/**
 * メイン処理関数（引数ベース）
 * @param {Object} params - リクエストパラメータ
 * @returns {Object} - 処理結果
 */
function processRequest(params) {
  let params;

  try {

    params = JSON.parse(e.postData.contents);

    Logger.info('Webhook受信', { params });



    // --- ▼▼▼ ここから修正・追加 ▼▼▼ ---



    // 処理の一意なIDを取得 (通常はAppSheetの行ID)

    const executionId = (params.returnToAppSheet && params.returnToAppSheet.rowId) 

      ? params.returnToAppSheet.rowId 

      : null;



    // IDに対して実行ロックを試みる

    LockingService.acquireLock(executionId);



    // --- ▲▲▲ ここまで修正・追加 ▲▲▲ ---



    Validator.validateRequestPayload(params);

    const result = routeAction(params);



    return ContentService.createTextOutput(JSON.stringify({ status: 'success', data: result }))

      .setMimeType(ContentService.MimeType.JSON);



  } catch (error) {

    // --- ▼▼▼ ここから修正・追加 ▼▼▼ ---



    // 重複実行ロックによるエラーの場合、特別に処理する

    if (error.message.includes('is currently locked')) {

      const lockedId = (params && params.returnToAppSheet) ? params.returnToAppSheet.rowId : 'N/A';

      Logger.info(`ID '${lockedId}' の重複実行を検知・回避しました。`);

      

      // AppSheet側でユーザーにエラーを見せないよう、エラーではなく「スキップ」として応答する

      return ContentService.createTextOutput(JSON.stringify({ status: 'skipped', message: 'Duplicate execution avoided.' }))

        .setMimeType(ContentService.MimeType.JSON);

    }



    // --- ▲▲▲ ここまで修正・追加 ▲▲▲ ---

    

    Logger.error('doPostで致命的なエラーが発生', error, { params });

    

    if (params && params.returnToAppSheet) {

      try {

        AppSheetService.sendErrorResponse(params.returnToAppSheet, error);

      } catch (appsheetError) {

        Logger.error('AppSheetへのエラー通知中にさらにエラーが発生', appsheetError, { params });

      }

    }

    

    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message }))

      .setMimeType(ContentService.MimeType.JSON)

      .setStatusCode(500);

  }
}


/**
 * テスト用関数
 * GASエディタから直接実行してテスト可能
 */
function testProcessRequest() {
  // TODO: テストデータを設定してください
  const testParams = {
    // 例: callId: "test-123",
    // 例: recordId: "rec-456",
    // 例: action: "CREATE"
  };

  console.log('=== テスト実行: Appsheet_ALL_Event ===');
  console.log('入力パラメータ:', JSON.stringify(testParams, null, 2));

  try {
    const result = processRequest(testParams);
    console.log('処理成功:', JSON.stringify(result, null, 2));
    return result;
  } catch (error) {
    console.error('処理エラー:', error.message);
    console.error('スタックトレース:', error.stack);
    throw error;
  }
}




/**

 * params.actionに応じて処理を振り分けるルーター関数

 * @param {Object} params

 */

function routeAction(params) {

  // この関数に変更はありません

  const { action, eventId, eventData, ownerData, returnToAppSheet } = params;

  let result = null;



  Logger.info(`アクション '${action}' を実行します。`);



  switch (action) {

    case 'CREATE':

      result = CalendarService.createEvent(ownerData.newOwnerEmail, eventData);

      break;



    case 'UPDATE':

      result = CalendarService.updateEvent(ownerData.newOwnerEmail, eventId, eventData);

      break;

      

    case 'TRANSFER':

      result = CalendarService.transferEvent(ownerData, eventId, eventData);

      break;



    case 'DELETE':

      result = CalendarService.deleteEvent(ownerData.oldOwnerEmail, eventId);

      break;



    default:

      throw new Error(`未知のアクションです: ${action}`);

  }



  if (returnToAppSheet) {

    const eventIdValue = result ? result.eventId : null;

    const eventUrlValue = result ? result.eventUrl : null;

    AppSheetService.sendSuccessResponse(returnToAppSheet, eventIdValue, eventUrlValue, action);

  }



  return result;

}